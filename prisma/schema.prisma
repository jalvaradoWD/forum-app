// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?


  accounts Account[]
  sessions Session[]
  Topic    Topic[]
  Comment  Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Forum {
  id          String     @id @default(uuid())
  name        String
  description String
  Category    Category[]
}

model Category {
  id      String  @id @default(uuid())
  name    String
  forum   String
  forumId Forum   @relation(fields: [forum], references: [id])
  Topic   Topic[]
}

model Topic {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  tags        String[]
  userId      String
  categoryId  String

  author   User      @relation(fields: [userId], references: [id])
  category Category  @relation(fields: [categoryId], references: [id])
  Comment  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  topicId   String
  userId    String

  author User  @relation(fields: [userId], references: [id])
  topic  Topic @relation(fields: [topicId], references: [id])
}
